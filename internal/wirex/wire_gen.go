// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wirex

import (
	"context"
	"github.com/xxx/testapp/internal/mods"
	"github.com/xxx/testapp/internal/mods/class"
	api3 "github.com/xxx/testapp/internal/mods/class/api"
	biz3 "github.com/xxx/testapp/internal/mods/class/biz"
	dal3 "github.com/xxx/testapp/internal/mods/class/dal"
	"github.com/xxx/testapp/internal/mods/rbac"
	"github.com/xxx/testapp/internal/mods/rbac/api"
	"github.com/xxx/testapp/internal/mods/rbac/biz"
	"github.com/xxx/testapp/internal/mods/rbac/dal"
	"github.com/xxx/testapp/internal/mods/student"
	"github.com/xxx/testapp/internal/mods/sys"
	api2 "github.com/xxx/testapp/internal/mods/sys/api"
	biz2 "github.com/xxx/testapp/internal/mods/sys/biz"
	dal2 "github.com/xxx/testapp/internal/mods/sys/dal"
	"github.com/xxx/testapp/pkg/util"
)

// Injectors from wire.go:

func BuildInjector(ctx context.Context) (*Injector, func(), error) {
	db, cleanup, err := InitDB(ctx)
	if err != nil {
		return nil, nil, err
	}
	cacher, cleanup2, err := InitCacher(ctx)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	auther, cleanup3, err := InitAuth(ctx)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	trans := &util.Trans{
		DB: db,
	}
	menu := &dal.Menu{
		DB: db,
	}
	menuResource := &dal.MenuResource{
		DB: db,
	}
	roleMenu := &dal.RoleMenu{
		DB: db,
	}
	bizMenu := &biz.Menu{
		Cache:           cacher,
		Trans:           trans,
		MenuDAL:         menu,
		MenuResourceDAL: menuResource,
		RoleMenuDAL:     roleMenu,
	}
	apiMenu := &api.Menu{
		MenuBIZ: bizMenu,
	}
	role := &dal.Role{
		DB: db,
	}
	userRole := &dal.UserRole{
		DB: db,
	}
	bizRole := &biz.Role{
		Cache:       cacher,
		Trans:       trans,
		RoleDAL:     role,
		RoleMenuDAL: roleMenu,
		UserRoleDAL: userRole,
	}
	apiRole := &api.Role{
		RoleBIZ: bizRole,
	}
	user := &dal.User{
		DB: db,
	}
	bizUser := &biz.User{
		Cache:       cacher,
		Trans:       trans,
		UserDAL:     user,
		UserRoleDAL: userRole,
	}
	apiUser := &api.User{
		UserBIZ: bizUser,
	}
	login := &biz.Login{
		Cache:       cacher,
		Auth:        auther,
		UserDAL:     user,
		UserRoleDAL: userRole,
		MenuDAL:     menu,
		UserBIZ:     bizUser,
	}
	apiLogin := &api.Login{
		LoginBIZ: login,
	}
	casbinx := &rbac.Casbinx{
		Cache:           cacher,
		MenuDAL:         menu,
		MenuResourceDAL: menuResource,
		RoleDAL:         role,
	}
	rbacRBAC := &rbac.RBAC{
		DB:       db,
		MenuAPI:  apiMenu,
		RoleAPI:  apiRole,
		UserAPI:  apiUser,
		LoginAPI: apiLogin,
		Casbinx:  casbinx,
	}
	logger := &dal2.Logger{
		DB: db,
	}
	bizLogger := &biz2.Logger{
		LoggerDAL: logger,
	}
	apiLogger := &api2.Logger{
		LoggerBIZ: bizLogger,
	}
	dictionary := &dal2.Dictionary{
		DB: db,
	}
	bizDictionary := &biz2.Dictionary{
		Trans:         trans,
		DictionaryDAL: dictionary,
	}
	apiDictionary := &api2.Dictionary{
		DictionaryBIZ: bizDictionary,
	}
	sysSYS := &sys.SYS{
		DB:            db,
		LoggerAPI:     apiLogger,
		DictionaryAPI: apiDictionary,
	}
	studentStudent := &student.Student{
		DB: db,
	}
	sign := &dal3.Sign{
		DB: db,
	}
	bizSign := &biz3.Sign{
		Trans:   trans,
		SignDAL: sign,
	}
	apiSign := &api3.Sign{
		SignBIZ: bizSign,
	}
	active := &dal3.Active{
		DB: db,
	}
	bizActive := &biz3.Active{
		Trans:     trans,
		ActiveDAL: active,
	}
	apiActive := &api3.Active{
		ActiveBIZ: bizActive,
	}
	pk := &dal3.Pk{
		DB: db,
	}
	bizPk := &biz3.Pk{
		Trans: trans,
		PkDAL: pk,
	}
	apiPk := &api3.Pk{
		PkBIZ: bizPk,
	}
	employ := &dal3.Employ{
		DB: db,
	}
	bizEmploy := &biz3.Employ{
		Trans:     trans,
		EmployDAL: employ,
	}
	apiEmploy := &api3.Employ{
		EmployBIZ: bizEmploy,
	}
	taoLun := &dal3.TaoLun{
		DB: db,
	}
	bizTaoLun := &biz3.TaoLun{
		Trans:     trans,
		TaoLunDAL: taoLun,
	}
	apiTaoLun := &api3.TaoLun{
		TaoLunBIZ: bizTaoLun,
	}
	file := &dal3.File{
		DB: db,
	}
	bizFile := &biz3.File{
		Trans:   trans,
		FileDAL: file,
	}
	apiFile := &api3.File{
		FileBIZ: bizFile,
	}
	signLog := &dal3.SignLog{
		DB: db,
	}
	bizSignLog := &biz3.SignLog{
		Trans:      trans,
		SignLogDAL: signLog,
	}
	apiSignLog := &api3.SignLog{
		SignLogBIZ: bizSignLog,
	}
	comment := &dal3.Comment{
		DB: db,
	}
	bizComment := &biz3.Comment{
		Trans:      trans,
		CommentDAL: comment,
	}
	apiComment := &api3.Comment{
		CommentBIZ: bizComment,
	}
	pkLog := &dal3.PkLog{
		DB: db,
	}
	bizPkLog := &biz3.PkLog{
		Trans:    trans,
		PkLogDAL: pkLog,
	}
	apiPkLog := &api3.PkLog{
		PkLogBIZ: bizPkLog,
	}
	pkScore := &dal3.PkScore{
		DB: db,
	}
	bizPkScore := &biz3.PkScore{
		Trans:      trans,
		PkScoreDAL: pkScore,
	}
	apiPkScore := &api3.PkScore{
		PkScoreBIZ: bizPkScore,
	}
	classClass := &class.Class{
		DB:         db,
		SignAPI:    apiSign,
		ActiveAPI:  apiActive,
		PkAPI:      apiPk,
		EmployAPI:  apiEmploy,
		TaoLunAPI:  apiTaoLun,
		FileAPI:    apiFile,
		SignLogAPI: apiSignLog,
		CommentAPI: apiComment,
		PkLogAPI:   apiPkLog,
		PkScoreAPI: apiPkScore,
	}
	modsMods := &mods.Mods{
		RBAC:    rbacRBAC,
		SYS:     sysSYS,
		Student: studentStudent,
		Class:   classClass,
	}
	injector := &Injector{
		DB:    db,
		Cache: cacher,
		Auth:  auther,
		M:     modsMods,
	}
	return injector, func() {
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}
